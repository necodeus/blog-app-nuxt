name: Deploy

on:
  push:
    branches:
      - production

jobs:
  semantic_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      new_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.9.0'

      - name: Install dependencies
        run: npm install

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Tag
        id: tag
        run: |
          NEW_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | sed 's/.*is //')
          echo "::set-output name=tag::production-v${NEW_VERSION}-$(date +'%Y%m%d')"

      - name: Create and Push Tag
        run: |
          git tag ${{ steps.tag.outputs.tag }}
          git push origin ${{ steps.tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Get Current Date
        id: current_date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - name: Extract Tag
        id: extract_tag
        run: echo "::set-output name=tag::$(git describe --tags --abbrev=0)"

  build_release:
    needs: semantic_release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.9.0'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn

      - name: Build
        run: yarn build

      - name: Setup Environment Variables for Artifacts
        run: echo "ARCHIVE_NAME=production_output_$(date +%s).tar.gz" >> $GITHUB_ENV

      - name: Archive Built Output
        run: tar -czf ${{ env.ARCHIVE_NAME }} .output

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.semantic_release.outputs.upload_url }}
          asset_path: ${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/gzip
